<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.ScoresMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.domain.Scores" >
    <result column="sno" property="sno" jdbcType="VARCHAR" />
    <result column="cno" property="cno" jdbcType="VARCHAR" />
    <result column="degree" property="degree" jdbcType="REAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    sno, cno, degree
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.demo.domain.ScoresExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from scores
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectbetween" resultType="com.example.demo.domain.Scores">
    select * from scores where degree between ${60} and ${80}
  </select>
  <select id="selectavg" parameterType="String" resultType="com.example.demo.domain.Scores">
    select avg(degree) from scores where cno = '3-105';
  </select>
  <select id="selectjuti" resultType="com.example.demo.domain.Scores">
    select * from scores where degree in (${85},${86},${88})
  </select>
  <select id="selectdegreedesc" resultType="com.example.demo.domain.Scores">
    select cno,sno,degree from scores where cno='3-105' and degree > any(select degree from scores where cno='3-245') order by degree desc
  </select>
  <select id="selectteascores" resultType="com.example.demo.domain.Scores">
    select cname,degree from scores inner join courses on(scores.cno=courses.cno) inner join teachers on(courses.tno=teachers.tno) where teachers.depart='计算机系'
  </select>
  <select id="selectrecord" resultType="com.example.demo.domain.Scores">
    select s1.sno,s1.degree from scores as s1 inner join scores as s2 on(s1.cno=s2.cno and s1.degree>s2.degree) where s1.cno='3-105' and s2.sno='109'
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.domain.ScoresExample" >
    delete from scores
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.domain.Scores" >
    insert into scores (sno, cno, degree
      )
    values (#{sno,jdbcType=VARCHAR}, #{cno,jdbcType=VARCHAR}, #{degree,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.domain.Scores" >
    insert into scores
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        sno,
      </if>
      <if test="cno != null" >
        cno,
      </if>
      <if test="degree != null" >
        degree,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        #{sno,jdbcType=VARCHAR},
      </if>
      <if test="cno != null" >
        #{cno,jdbcType=VARCHAR},
      </if>
      <if test="degree != null" >
        #{degree,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.domain.ScoresExample" resultType="java.lang.Integer" >
    select count(*) from scores
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update scores
    <set >
      <if test="record.sno != null" >
        sno = #{record.sno,jdbcType=VARCHAR},
      </if>
      <if test="record.cno != null" >
        cno = #{record.cno,jdbcType=VARCHAR},
      </if>
      <if test="record.degree != null" >
        degree = #{record.degree,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update scores
    set sno = #{record.sno,jdbcType=VARCHAR},
      cno = #{record.cno,jdbcType=VARCHAR},
      degree = #{record.degree,jdbcType=REAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>