<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.StudentsMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.domain.Students" >
    <result column="sno" property="sno" jdbcType="VARCHAR" />
    <result column="sname" property="sname" jdbcType="VARCHAR" />
    <result column="ssex" property="ssex" jdbcType="VARCHAR" />
    <result column="sbirthday" property="sbirthday" jdbcType="TIMESTAMP" />
    <result column="classes" property="classes" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="BaseResultMap1" type="com.example.demo.domain.Courses" >
    <result column="cname" property="cname" jdbcType="VARCHAR" />
    <collection property="" ofType="com.example.demo.domain.Scores">
      <result column="degrees" property="degrees" jdbcType="REAL" />
    </collection>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    sno, sname, ssex, sbirthday, classes
  </sql>
  <select id="selectnv" resultType="com.example.demo.domain.Students" >
    select * from students where classes ='95031' or '女'
  </select>
  <select id="selectclasses"  resultType="com.example.demo.domain.Students">
    select * from students where classes in('95033','95031')
  </select>
  <select id="selectsname"  resultType="com.example.demo.domain.Students">
    select sname from students where ssex=(select ssex from students where sname='李军')
  </select>
  <select id="selectdegreeavg" resultType="com.example.demo.domain.Students">
    select cname,avg(degree) from students inner join scores on(students.sno=scores.sno) inner join courses on(scores.cno=courses.cno) where classes='95033' group by  cname
  </select>
  <select id="selectsameyear" resultType="com.example.demo.domain.Students">
    select s1.sno,s1.sname,s1.sbirthday from students as s1 inner join students as s2 on(year(s1.sbirthday)=year(s2.sbirthday)) where s2.sno='108'
  </select>
  <select id="selectnotwang" resultType="com.example.demo.domain.Students">
    select * from students where sname not like '王%';
  </select>
  <select id="selectage" resultType="com.example.demo.domain.Students">
    select sname,year(now())-year(sbirthday) as sage from students
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.demo.domain.StudentsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from students
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.domain.StudentsExample" >
    delete from students
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.domain.Students" >
    insert into students (sno, sname, ssex, 
      sbirthday, classes)
    values (#{sno,jdbcType=VARCHAR}, #{sname,jdbcType=VARCHAR}, #{ssex,jdbcType=VARCHAR}, 
      #{sbirthday,jdbcType=TIMESTAMP}, #{classes,jdbcType=VARCHAR})
  </insert>
  <update id="updateSbirthday" parameterType="map">
    update students set sbirthday = '1974-09-03 00:00:00.000000' where sno = '103'
  </update>
  <insert id="insertSelective" parameterType="com.example.demo.domain.Students" >
    insert into students
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        sno,
      </if>
      <if test="sname != null" >
        sname,
      </if>
      <if test="ssex != null" >
        ssex,
      </if>
      <if test="sbirthday != null" >
        sbirthday,
      </if>
      <if test="classes != null" >
        classes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        #{sno,jdbcType=VARCHAR},
      </if>
      <if test="sname != null" >
        #{sname,jdbcType=VARCHAR},
      </if>
      <if test="ssex != null" >
        #{ssex,jdbcType=VARCHAR},
      </if>
      <if test="sbirthday != null" >
        #{sbirthday,jdbcType=TIMESTAMP},
      </if>
      <if test="classes != null" >
        #{classes,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.domain.StudentsExample" resultType="java.lang.Integer" >
    select count(*) from students
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update students
    <set >
      <if test="record.sno != null" >
        sno = #{record.sno,jdbcType=VARCHAR},
      </if>
      <if test="record.sname != null" >
        sname = #{record.sname,jdbcType=VARCHAR},
      </if>
      <if test="record.ssex != null" >
        ssex = #{record.ssex,jdbcType=VARCHAR},
      </if>
      <if test="record.sbirthday != null" >
        sbirthday = #{record.sbirthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.classes != null" >
        classes = #{record.classes,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <insert id="insertStudent" parameterType="map">
    insert into students (sno,sname,ssex,sbirthday,classes) values ("110","aaa","man",'1974-09-03 00:00:00.000000',"95031")
  </insert>
  <delete id="deleteStudent" parameterType="map">
    delete from students where sno = #{sno}
  </delete>
  <update id="updateByExample" parameterType="map">
    update students
    set sno = #{record.sno,jdbcType=VARCHAR},
      sname = #{record.sname,jdbcType=VARCHAR},
      ssex = #{record.ssex,jdbcType=VARCHAR},
      sbirthday = #{record.sbirthday,jdbcType=TIMESTAMP},
      classes = #{record.classes,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

</mapper>